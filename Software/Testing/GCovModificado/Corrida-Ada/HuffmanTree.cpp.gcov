        -:    0:Source:../../HuffmanModificado/HuffmanTree.cpp
        -:    0:Programs:17
        -:    1:#include "HuffmanTree.h"
        -:    2:
        4:    3:HuffmanTree::HuffmanTree(int n)
        -:    4:{
        4:    5:    tam = n;
     1028:    6:    for(int i=0; i<MAXSYMBS; i++)
        -:    7:    {
     1024:    8:        signos[i] = ' ';
     1024:    9:        codigos[i] = new HuffmanCode();
        -:   10:    }
        4:   11:}
        -:   12:
       12:   13:HuffmanTree::~HuffmanTree()
        -:   14:{
     1028:   15:    for( int i=0; i<MAXSYMBS; i++ )
        -:   16:    {
     1024:   17:        delete codigos[i];
        -:   18:    }
        8:   19:}
        -:   20:
      512:   21:void HuffmanTree::setNodo(unsigned char x, int f, int i)
        -:   22:{
      512:   23:    setSigno(x, i);
      512:   24:    setFrecuencia(i, f);
      512:   25:}
        -:   26:
     1022:   27:void HuffmanTree::setNodo(HuffmanNode hn, int i)
        -:   28:{
     1022:   29:    arbol[i].setFrecuencia(hn.getFrecuencia());
     1022:   30:    arbol[i].setLeft(hn.isLeft());
     1022:   31:    arbol[i].setIzquierdo(hn.getIzquierdo());
     1022:   32:    arbol[i].setDerecho(hn.getDerecho());
     1022:   33:    arbol[i].setPadre(hn.getPadre());
     1022:   34:}
        -:   35:
    29174:   36:HuffmanCode * HuffmanTree::getCodigo( unsigned char x )
        -:   37:{
    29174:   38:    int i = buscar(x);
    29174:   39:    return getCodigo(i);
        -:   40:}
        -:   41:
    #####:   42:void HuffmanTree::setCodigo(HuffmanCode *c, unsigned char x)
        -:   43:{
    #####:   44:    int i = buscar( x );
    #####:   45:    codigos[i] = c;
    #####:   46:}
        -:   47:
        2:   48:void HuffmanTree::encode()
        -:   49:{
        2:   50:    makeTree();
        2:   51:    makeCodes();
        2:   52:}
        -:   53:
        2:   54:void HuffmanTree::makeTree()
        -:   55:{
        -:   56:    // crear una cola de prioridades ordenada por las frecuencias de los simbolos...
        2:   57:    Heap *cp = new Heap();
      514:   58:    for(int i = 0; i < tam; i++)
        -:   59:    {
      512:   60:        Frequency *fr = new Frequency(i, this->getFrecuencia(i));
      512:   61:        cp->add(fr);
        -:   62:    }
        -:   63:
        -:   64:    // p apunta al siguiente nodo libre disponible en el arbol... 
      512:   65:    for(int p = tam; p < 2 * tam - 1; p++)
        -:   66:    {
        -:   67:        // ...tomar los descriptores de frecuencia p1 y p2 con menor frecuencia de la cola de prioridad...
      510:   68:        Frequency *p1 = (Frequency *) cp->remove();
      510:   69:        Frequency *p2 = (Frequency *) cp->remove();
        -:   70:
        -:   71:        // ...ajustar ambos nodos como hijos del nuevo nodo p...
      510:   72:        int ip1 = p1->getIndice();
      510:   73:        int ip2 = p2->getIndice();
      510:   74:        arbol[ip1].setPadre(p);
      510:   75:        arbol[ip1].setLeft(true);
      510:   76:        arbol[ip2].setPadre(p);
      510:   77:        arbol[ip2].setLeft(false);
        -:   78:
        -:   79:        // calcular la frecuencia del nodo union que se acaba de crear...
      510:   80:        int f = arbol[ip1].getFrecuencia() + arbol[ip2].getFrecuencia();
        -:   81:
        -:   82:        // guardar esa frecuencia en el nodo union..
      510:   83:        arbol[p].setFrecuencia(f);
        -:   84:
        -:   85:        // guardar los indices de sus hijos...
      510:   86:        arbol[p].setIzquierdo(ip1);
      510:   87:        arbol[p].setDerecho(ip2);
        -:   88:
        -:   89:        // agregar el descriptor de frecuencia del nodo union a la cola de prioridad...
      510:   90:        Frequency *nf = new Frequency (p, f);
      510:   91:        cp->add(nf);
        -:   92:    }    
        2:   93:    delete cp;
        2:   94:}
        -:   95:
        4:   96:void HuffmanTree::makeCodes()
        -:   97:{
        -:   98:    // indice de la raiz en el arreglo que representa al arbol...
        4:   99:    int iraiz = (2 * tam - 1) - 1;
        -:  100:
        -:  101:    // ahora extraemos los codigos del arbol y los guardamos en el vector de codigos
     1028:  102:    for(int i=0; i<tam; i++)
        -:  103:    {
        -:  104:        // navegamos hacia arriba...
     1024:  105:        int p = i;
    17608:  106:        while(p != iraiz)
        -:  107:        {
     8292:  108:            if(arbol[p].isLeft())
        -:  109:            {
     3944:  110:                codigos[i]->setBit(0);
        -:  111:            }
        -:  112:            else
        -:  113:            {
     4348:  114:                codigos[i]->setBit(1);
        -:  115:            }
     8292:  116:            p = arbol[p].getPadre();
        -:  117:        }
        -:  118:    }    
        4:  119:}
        -:  120:
        -:  121:// **** metodos privados
    29174:  122:int HuffmanTree::buscar(unsigned char x)
        -:  123:{
    29174:  124:    int i = 0;
    29174:  125:    int variable_return = -1;
    29174:  126:    int offset = tam % 8;
        -:  127:
    29174:  128:    for(i = offset - 1; i >= 0; --i)
        -:  129:    {
    #####:  130:        if( x == signos[i] )
        -:  131:        {
    #####:  132:            variable_return = i;
    #####:  133:            break;
        -:  134:        }
        -:  135:    }
    29174:  136:    if(variable_return == -1)
        -:  137:    {
   450206:  138:        for(i = tam - 1; i >=  offset; i-=8)
        -:  139:        {
   450206:  140:            if( x == signos[i] ) return i;
   446028:  141:            else if( x == signos[i - 1] )
        -:  142:            {
     3626:  143:                variable_return = (i - 1);
     3626:  144:                break;
        -:  145:            }
   442402:  146:            else if( x == signos[i - 2] )
        -:  147:            {
     3866:  148:                variable_return = (i - 2);
     3866:  149:                break;
        -:  150:            }
   438536:  151:            else if( x == signos[i - 3] )
        -:  152:            {
     3416:  153:                variable_return = (i - 3);
     3416:  154:                break;
        -:  155:            }
   435120:  156:            else if( x == signos[i - 4] )
        -:  157:            {
     3852:  158:                variable_return = (i - 4);
     3852:  159:                break;
        -:  160:            }
   431268:  161:            else if( x == signos[i - 5] )
        -:  162:            {
     3616:  163:                variable_return = (i - 5);
     3616:  164:                break;
        -:  165:            }
   427652:  166:            else if( x == signos[i - 6] )
        -:  167:            {
     3354:  168:                variable_return = (i - 6);
     3354:  169:                break;
        -:  170:            }
   424298:  171:            else if( x == signos[i - 7] )
        -:  172:            {
     3266:  173:                variable_return = (i - 7);
     3266:  174:                break;
        -:  175:            }
        -:  176:        }
        -:  177:    }
        -:  178:    
    24996:  179:    return variable_return;
       18:  180:}
